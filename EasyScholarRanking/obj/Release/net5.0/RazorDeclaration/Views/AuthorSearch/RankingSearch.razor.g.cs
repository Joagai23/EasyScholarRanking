// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace EasyScholarRanking.Views.AuthorSearch
{
    #line hidden
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Jorge\Universidad\5\EasyScholarRanking\Projects\EasyScholarRanking\EasyScholarRanking\Views\AuthorSearch\RankingSearch.razor"
using EasyScholarRanking.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Jorge\Universidad\5\EasyScholarRanking\Projects\EasyScholarRanking\EasyScholarRanking\Views\AuthorSearch\RankingSearch.razor"
using BlazorAnimate;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Jorge\Universidad\5\EasyScholarRanking\Projects\EasyScholarRanking\EasyScholarRanking\Views\AuthorSearch\RankingSearch.razor"
using ChartJs.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Jorge\Universidad\5\EasyScholarRanking\Projects\EasyScholarRanking\EasyScholarRanking\Views\AuthorSearch\RankingSearch.razor"
using ChartJs.Blazor.PieChart;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Jorge\Universidad\5\EasyScholarRanking\Projects\EasyScholarRanking\EasyScholarRanking\Views\AuthorSearch\RankingSearch.razor"
using ChartJs.Blazor.Util;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Jorge\Universidad\5\EasyScholarRanking\Projects\EasyScholarRanking\EasyScholarRanking\Views\AuthorSearch\RankingSearch.razor"
using ChartJs.Blazor.Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Jorge\Universidad\5\EasyScholarRanking\Projects\EasyScholarRanking\EasyScholarRanking\Views\AuthorSearch\RankingSearch.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Jorge\Universidad\5\EasyScholarRanking\Projects\EasyScholarRanking\EasyScholarRanking\Views\AuthorSearch\RankingSearch.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
    public partial class RankingSearch : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 105 "C:\Jorge\Universidad\5\EasyScholarRanking\Projects\EasyScholarRanking\EasyScholarRanking\Views\AuthorSearch\RankingSearch.razor"
       

    private string Venue = "";
    private string Location = "International";
    private int MinYear = 2019;
    private int MaxYear = 2020;
    private int NumberEntries = 8;
    private int CareerLenght = 0;
    private List<AuthorClass> authorList;
    private List<Venue> venueList;
    private double meanPublicationsTable = 0;

    private double contributionPercentage = 0.015; //1.5%
    private double appereancePercentage = 0.35; //35%

    private bool IsLoading = false;
    private bool ToggleFormValue = false;

    private Animate showForm;
    private PieConfig pieChart;


    void SetAuthorList()
    {
        ToggleForm();

        if (!string.IsNullOrWhiteSpace(Venue) && MinYear > 0 && MaxYear > 0 && NumberEntries > 0 && CareerLenght >= 0 && !string.IsNullOrWhiteSpace(Location))
        {
            authorList = new List<AuthorClass>(NumberEntries);
            authorList = Data.SearchDblp.GetRankingByVenueYear(ParseVenue(Venue), MinYear, MaxYear, NumberEntries, CareerLenght, Location);
        }

        if (authorList != null)
        {
            pieChart.Data.Datasets.Clear();
            pieChart.Data.Labels.Clear();
            FillChart();
        }
    }

    void ToggleForm()
    {
        ToggleFormValue = !ToggleFormValue;

        if (ToggleFormValue)
        {
            showForm.Run();
        }
    }

    protected override void OnInitialized()
    {
        pieChart = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Authors Pie Chart",
                    FontSize = 16 // Default is 12
                },
                MaintainAspectRatio = false,
                Legend = new Legend
                {
                    Display = false
                }
            }
        };

        venueList = Data.JsonFileVenueService.GetVenues().ToList();
    }

    private void FillChart()
    {
        PieDataset<int> dataset = new PieDataset<int>();

        int totalPublications = GetTotalPublications();
        int numberAuthors = authorList.Count;
        string meanText = GetMeanText(totalPublications, numberAuthors);
        pieChart.Options.Title.Text = "Authors Pie Chart" + meanText;
        int othersScore = 0;

        if (authorList.Count != 0)
        {
            int currentScore = authorList[0].Score;
            int numberOfAuthorsSameScore = CountAuthorByScore(currentScore);
            double currentScorePercentage = (double)currentScore / (double)totalPublications;
            double currentAppereancePercentage = (double)numberOfAuthorsSameScore / (double)NumberEntries;

            foreach (AuthorClass author in authorList)
            {
                if (currentScore != author.Score)
                {
                    currentScore = author.Score;
                    numberOfAuthorsSameScore = CountAuthorByScore(currentScore);
                    currentScorePercentage = (double)currentScore / (double)totalPublications;
                    currentAppereancePercentage = (double)numberOfAuthorsSameScore / (double)NumberEntries;
                }

                if (currentScorePercentage > contributionPercentage || currentAppereancePercentage < appereancePercentage)
                {
                    double roundedPercentage = Math.Round(currentScorePercentage, 2) * 100;
                    int roundedIntegerPercentage = (int)roundedPercentage;

                    pieChart.Data.Labels.Add(author.Text + " - " + roundedIntegerPercentage + "%");
                    dataset.Add(author.Score);
                }
                else
                {
                    othersScore += author.Score;
                }
            }

            if (othersScore != 0)
            {
                double percentage = ((double)othersScore / (double)totalPublications) * 100;
                percentage = Math.Round(percentage, 2);

                pieChart.Data.Labels.Add("Others - " + (int)percentage + "%");
                dataset.Add(othersScore);
            }

            dataset.BackgroundColor = GetBackgroundColors();
            dataset.BorderColor = "#808080";

            pieChart.Data.Datasets.Add(dataset);
        }
    }

    private int GetTotalPublications()
    {
        int total = 0;

        foreach (AuthorClass author in authorList)
        {
            total += author.Score;
        }

        return total;
    }

    private string[] GetBackgroundColors()
    {
        int size = authorList.Count;
        string[] colorArray = new string[size];

        Random random = new Random(DateTime.Now.Millisecond);
        int a, b, c;

        for (int i = 0; i < size; i++)
        {
            a = random.Next(256);
            b = random.Next(256);
            c = random.Next(256);
            colorArray[i] = ColorUtil.ColorHexString((byte)a, (byte)b, (byte)c);
        }

        return colorArray;
    }

    private int CountAuthorByScore(int score)
    {
        int number = 0;

        foreach (AuthorClass author in authorList)
        {
            if (author.Score == score)
            {
                number++;
            }
            else if (author.Score < score)
            {
                break;
            }
        }

        return number;
    }

    private string GetMeanText(int numPublications, int numAuthors)
    {

        if (numPublications == 0 && numAuthors == 0)
        {
            return " - No publications found!";
        }

        string meanText = "";

        try
        {
            double mean = (double)numPublications / (double)numAuthors;
            mean = Math.Round(mean, 2);
            meanPublicationsTable = mean;

            if (mean != 0)
            {
                return " - " + mean + " publications by author";
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.StackTrace);
        }

        return meanText;
    }

    private string ParseVenue(string venue)
    {
        foreach (Venue v in venueList)
        {
            if (venue.Equals(v.Name))
            {
                return v.Key;
            }
        }

        return venue.Replace(' ', '_');
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
