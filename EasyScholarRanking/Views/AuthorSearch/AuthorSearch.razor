@using EasyScholarRanking.Models;
@using EasyScholarRanking.Data;
@using Microsoft.AspNetCore.Components.Web; <!-- NEVER DELETE -->
<!-- Styles that change code values -->
<style>
    .rank-form-container {
        border: 2px solid #808080;
        position: absolute;
        padding: 20px;
        background-color: #f6f6f6;
        z-index: 10;
        opacity: @(ToggleFormValue?1:0);
        pointer-events: @(ToggleFormValue?"auto":"none");
    }
</style>

<!-- Rank form + Venue Writer -->
<div class="rank-form-container">
    <div class="rank-form">
        <b>Author: </b><br />
        <input type="text" @bind="Author" /><br />

        <b>Venue: </b><br />
        <input type="text" list="venueList" id="venueInput" @bind="Venue" multiple/><br />

        <datalist id="venueList">
            @foreach (Venue venue in venueList)
            {
            <option> @venue.Name </option>
            }
        </datalist>

        <b>Starting Year: </b><br />
        <input type="number" id="minYearInput" @bind="MinYear" /><br />

        <b>Finishing Year: </b><br />
        <input type="number" id="maxYearInput" @bind="MaxYear" /><br />

        <b>Location: </b><br />

        @if (LocationSearch.Equals("local"))
        {
        <select class="form-control" @bind="Location">
            @foreach (String location in locationList)
                {
            <option>@location</option>
                }
        </select>
        }
        else
        {
        <input type="text" @bind="Location" /><br />
        }

        <b>Location Search: </b><br />
        <label class="radio-inline"> <input type="radio" name="opradio" @onclick='(e => SetLocationSearch("dblp"))' checked /> Dblp Api </label>
        <label class="radio-inline"> <input type="radio" name="opradio" @onclick='(e => SetLocationSearch("local"))' /> Database</label><br />

        <input type="button" id="searchButton" value="Search Author" @onclick="(e => SearchAuthor())" />
    </div>
</div>

<!-- Author info -->
<div class="author-container">
    <div>
        <h4 class="display-5">@IndividualVenueTitle Venue Search</h4>
    </div>
    <br />
    @if (AuthorFound)
    {
        <table style=" border-collapse: separate">
            <tr>
                <td class="author" id="c1">Position: </td>
                <td class="author" id="c2">@PositionVenue</td>
            </tr>
            <tr>
                <td class="author" id="c1">Contribution: </td>
                <td class="author" id="c2">@PublicationsVenue</td>
            </tr>
            <tr>
                <td class="author" id="c1">Active Years: </td>
                <td class="author" id="c2">@ActiveYearsVenue</td>
            </tr>
            <tr>
                <td class="author" id="c1">Mean: </td>
                <td class="author" id="c2">@PublicationMeanVenue</td>
            </tr>
            <tr>
                <td class="author" id="c1">Venue: </td>
                <td class="author" id="c2">@VenueKey</td>
            </tr>
            <tr>
                <td class="author" id="c1">Percentile: </td>
                <td class="author" id="c2">@PercentileVenue</td>
            </tr>
            <tr>
                <td class="author" id="c1">Quartile: </td>
                <td class="author" id="c2">@QuartileVenue</td>
            </tr>
        </table>
    }
    else
    {
        <div>
            <h5 class="display-5">Author not found!</h5>
        </div>
    }

</div>

<!-- Author info - possible statistic -->
<div class="author-container">
    <div>
        <h4 class="display-5">Google Scholar Ranking (Software Systems)</h4>
    </div>
    <br />
    @if (GoogleAuthorFound)
    {
        <table style=" border-collapse: separate">
            <tr>
                <td class="author" id="c1">Position: </td>
                <td class="author" id="c2">@PositionGoogle</td>
            </tr>
            <tr>
                <td class="author" id="c1">Contribution: </td>
                <td class="author" id="c2">@PublicationsGoogle</td>
            </tr>
            <tr>
                <td class="author" id="c1">Active Years: </td>
                <td class="author" id="c2">@ActiveYearsGoogle</td>
            </tr>
            <tr>
                <td class="author" id="c1">Mean: </td>
                <td class="author" id="c2">@PublicationMeanGoogle</td>
            </tr>
            <tr>
                <td class="author" id="c1">Venues: </td>
                <td class="author" id="c2">@NumberVenuesGoogle</td>
            </tr>
            <tr>
                <td class="author" id="c1">Percentile: </td>
                <td class="author" id="c2">@PercentileGoogle</td>
            </tr>
            <tr>
                <td class="author" id="c1">Quartile: </td>
                <td class="author" id="c2">@QuartileGoogle</td>
            </tr>
        </table>
    }
    else
    {
        <div>
            <h5 class="display-5">Author not found!</h5>
        </div>
    }

</div>

<!-- Form toggle -->
<div class="form-toggle">
    <input type="button" value="@(ToggleFormValue?"Hide Form":"Show Form")" disabled="@(IsLoading)" @onclick="(e => ToggleForm())" />
    <div class="info-query">
        @Query
    </div>
</div>

<!-- Loading message -->
@if (IsLoading)
{
    <div class="loading-message" id="c1">
        Please wait...
    </div>
}

@code {

    //////////////////////////////////////////////////////////////////////////////////////////////////////// PROPERTIES

    // Form searching properties
    private string Venue = "";
    private string Location = "International";
    private int MinYear = 2019;
    private int MaxYear = 2020;
    private string Author = "";
    private string LocationSearch = "";

    // Search variables
    private List<Venue> venueList;
    private List<AuthorClass> googleAuthorList;
    private List<AuthorClass> venueAuthorList;
    private List<String> locationList;

    private string PositionVenue = "";
    private string PublicationsVenue = "";
    private string ActiveYearsVenue = "";
    private string PublicationMeanVenue = "";
    private string PercentileVenue = "";
    private string QuartileVenue = "";
    private string VenueKey = "";

    private string PositionGoogle = "";
    private string PublicationsGoogle = "";
    private string ActiveYearsGoogle = "";
    private string PublicationMeanGoogle = "";
    private string NumberVenuesGoogle = "";
    private string PercentileGoogle = "";
    private string QuartileGoogle = "";


    // UI properties
    private bool IsLoading = false;
    private bool ToggleFormValue = false;
    private bool AuthorFound = true;
    private bool GoogleAuthorFound = true;
    private string Query;
    private string IndividualVenueTitle = "Single";


    //////////////////////////////////////////////////////////////////////////////////////////////////////// FUNCTIONS

    //
    // Search and set author info
    private async void SearchAuthor()
    {
        if (!string.IsNullOrWhiteSpace(Venue) && MinYear > 0 && MaxYear > 0 && !string.IsNullOrWhiteSpace(Author) && !string.IsNullOrWhiteSpace(Location))
        {
            // Change UI
            IsLoading = true;
            ToggleForm();

            await Task.Run(SearchVenues);

            // Update UI
            IsLoading = false;
        }

        Query = DataHelper.GetAuthorInfoQuery(Venue, Location, MinYear, MaxYear, Author);

        // Tell application we have changed the UI, after awaiting the ranking it does not update automatically
        this.StateHasChanged();
    }

    private async void SearchVenues()
    {
        if (!Venue.Equals("Google Scholar Ranking (Software Systems) - March 2021"))
        {
            SearchIndividualVenue();
            SearchGoogleScholar(false);
        }
        else
        {
            SearchGoogleScholar(true);
            SetBestIndividualVenue();
        }
    }

    // Search Individual Venue and set properties
    private void SearchIndividualVenue()
    {
        venueAuthorList = new List<AuthorClass>();
        venueAuthorList = Data.SearchDblp.GetIndividualVenueRanking(DataHelper.ParseVenue(Venue, venueList), MinYear, MaxYear, Location, null, LocationSearch);

        // Get author object given the name
        AuthorClass authorClass = DataHelper.GetAuthorByName(Author, venueAuthorList);
        if (authorClass == null)
        {
            AuthorNotFound();
            AuthorFound = false;
        }
        else
        {
            SetAuthorProperties(authorClass);
            AuthorFound = true;
        }
    }

    // Search Google Scholar Ranking
    private void SearchGoogleScholar(bool searchBest)
    {
        googleAuthorList = new List<AuthorClass>();
        if (searchBest)
        {
            IndividualVenueTitle = "Best";
            googleAuthorList = Data.SearchDblp.GetIndividualVenueRanking("GSR", MinYear, MaxYear, Location, Author, LocationSearch);
        }
        else
        {
            IndividualVenueTitle = "Single";
            googleAuthorList = Data.SearchDblp.GetIndividualVenueRanking("GSR", MinYear, MaxYear, Location, null, LocationSearch);
        }


        // Get author object given the name
        AuthorClass authorClass = DataHelper.GetAuthorByName(Author, googleAuthorList);
        if (authorClass == null)
        {
            GoogleAuthorNotFound();
            GoogleAuthorFound = false;

        }
        else
        {
            SetGoogleAuthorProperties(authorClass);
            GoogleAuthorFound = true;
        }
    }

    // Set properties to empty when author can't be found in a ranking
    private void AuthorNotFound()
    {
        PositionVenue = "";
        PublicationsVenue = "";
        ActiveYearsVenue = "";
        PublicationMeanVenue = "";
        VenueKey = "";
        PercentileVenue = "";
        QuartileVenue = "";
    }

    // Set properties to empty when author can't be found in google ranking
    private void GoogleAuthorNotFound()
    {
        PositionGoogle = "";
        PublicationsGoogle = "";
        ActiveYearsGoogle = "";
        PublicationMeanGoogle = "";
        NumberVenuesGoogle = "";
        PercentileGoogle = "";
        QuartileGoogle = "";
    }

    // Find and set properties for an Author
    private void SetAuthorProperties(AuthorClass authorClass)
    {
        PositionVenue = authorClass.Position.ToString() + " / " + venueAuthorList.Count.ToString();
        PublicationsVenue = authorClass.Score.ToString() + " publications";
        ActiveYearsVenue = (authorClass.GetYearDifference() + 1).ToString() + " years";
        PublicationMeanVenue = DataHelper.GetMean(authorClass.Score, authorClass.GetYearDifference() + 1).ToString() + " publications by year";
        VenueKey = DataHelper.ParseVenue(Venue, venueList);
        int percentile = DataHelper.GetPercentile(authorClass.Score, venueAuthorList);
        PercentileVenue = percentile.ToString() + "th";
        QuartileVenue = DataHelper.GetQuartile(percentile);
    }

    // Find and set properties for an Author inside the google ranking
    private void SetGoogleAuthorProperties(AuthorClass authorClass)
    {
        PositionGoogle = authorClass.Position.ToString() + " / " + googleAuthorList.Count.ToString();
        PublicationsGoogle = authorClass.Score.ToString() + " publications";
        ActiveYearsGoogle = (authorClass.GetYearDifference() + 1).ToString() + " years";
        PublicationMeanGoogle = DataHelper.GetMean(authorClass.Score, authorClass.GetYearDifference() + 1).ToString() + " publications by year";
        NumberVenuesGoogle = "published in " + authorClass.VenueList.Count.ToString() + " / 20 GSR venues";
        int percentile = DataHelper.GetPercentile(authorClass.Score, googleAuthorList);
        PercentileGoogle = percentile.ToString() + "th";
        QuartileGoogle = DataHelper.GetQuartile(percentile);
    }

    // Set best individual venue
    private void SetBestIndividualVenue()
    {
        // Obtain best venue
        AuthorClass bestVenue = DataHelper.GetAuthorByName("BestVenue", googleAuthorList);

        if (bestVenue != null)
        {
            // Set Best Venue to current venue and search individually
            Venue = bestVenue.VenueList.First();
            SearchIndividualVenue();

            // Set Venue again to GSR so user can keep looking in the same venue it wanted
            Venue = "Google Scholar Ranking (Software Systems) - March 2021";
            AuthorFound = true;
        }
        else
        {
            AuthorNotFound();
            AuthorFound = false;
        }
    }

    // Toggle Searching Form
    private void ToggleForm()
    {
        ToggleFormValue = !ToggleFormValue;
    }

    // Change Location Search Type
    private void SetLocationSearch(string locationSearch)
    {
        LocationSearch = locationSearch;
    }

    // Get venue list from json
    protected override void OnInitialized()
    {
        venueList = Data.JsonFileVenueService.GetVenues().ToList();
        locationList = DataHelper.GetLocalSearchLocations();
    }

}